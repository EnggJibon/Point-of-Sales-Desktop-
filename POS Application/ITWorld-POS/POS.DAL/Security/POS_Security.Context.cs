//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.DAL.Security
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POS_Security : DbContext
    {
        public POS_Security()
            : base("name=POS_Security")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessLog> AccessLogs { get; set; }
        public virtual DbSet<AdditionalOperationPermission> AdditionalOperationPermissions { get; set; }
        public virtual DbSet<AdditionalScreenPermission> AdditionalScreenPermissions { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationPolicy> ApplicationPolicies { get; set; }
        public virtual DbSet<EmployeeInformation> EmployeeInformations { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleAudit> RoleAudits { get; set; }
        public virtual DbSet<RoleWiseOperationPermission> RoleWiseOperationPermissions { get; set; }
        public virtual DbSet<RoleWiseScreenPermission> RoleWiseScreenPermissions { get; set; }
        public virtual DbSet<Screen> Screens { get; set; }
        public virtual DbSet<ScreenOperation> ScreenOperations { get; set; }
        public virtual DbSet<UserInformation> UserInformations { get; set; }
        public virtual DbSet<UserInRole> UserInRoles { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual ObjectResult<USP_GetAdditionalOperationPermissionList_Result> USP_GetAdditionalOperationPermissionList(Nullable<long> id, Nullable<long> userId, Nullable<long> screenOperationId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var screenOperationIdParameter = screenOperationId.HasValue ?
                new ObjectParameter("ScreenOperationId", screenOperationId) :
                new ObjectParameter("ScreenOperationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAdditionalOperationPermissionList_Result>("USP_GetAdditionalOperationPermissionList", idParameter, userIdParameter, screenOperationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAdditionalScreenPermissionList_Result> USP_GetAdditionalScreenPermissionList(Nullable<long> id, Nullable<long> userId, Nullable<long> moduleId, Nullable<long> screenId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var screenIdParameter = screenId.HasValue ?
                new ObjectParameter("ScreenId", screenId) :
                new ObjectParameter("ScreenId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAdditionalScreenPermissionList_Result>("USP_GetAdditionalScreenPermissionList", idParameter, userIdParameter, moduleIdParameter, screenIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllEmployeeInformation_Result> USP_GetAllEmployeeInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllEmployeeInformation_Result>("USP_GetAllEmployeeInformation");
        }
    
        public virtual ObjectResult<USP_GetAllUserInformation_Result> USP_GetAllUserInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllUserInformation_Result>("USP_GetAllUserInformation");
        }
    
        public virtual ObjectResult<USP_GetRoleWiseOperationPermissionList_Result> USP_GetRoleWiseOperationPermissionList(Nullable<long> id, Nullable<long> roleId, Nullable<long> screenOperationId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            var screenOperationIdParameter = screenOperationId.HasValue ?
                new ObjectParameter("ScreenOperationId", screenOperationId) :
                new ObjectParameter("ScreenOperationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRoleWiseOperationPermissionList_Result>("USP_GetRoleWiseOperationPermissionList", idParameter, roleIdParameter, screenOperationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRoleWiseScreenPermissionList_Result> USP_GetRoleWiseScreenPermissionList(Nullable<long> id, Nullable<long> roleId, Nullable<long> moduleId, Nullable<long> screenId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var screenIdParameter = screenId.HasValue ?
                new ObjectParameter("ScreenId", screenId) :
                new ObjectParameter("ScreenId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRoleWiseScreenPermissionList_Result>("USP_GetRoleWiseScreenPermissionList", idParameter, roleIdParameter, moduleIdParameter, screenIdParameter);
        }
    
        public virtual ObjectResult<USP_GetScreenList_Result> USP_GetScreenList(Nullable<long> id, Nullable<long> moduleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetScreenList_Result>("USP_GetScreenList", idParameter, moduleIdParameter);
        }
    
        public virtual ObjectResult<USP_GetScreenOperationList_Result> USP_GetScreenOperationList(Nullable<long> id, Nullable<long> screenId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var screenIdParameter = screenId.HasValue ?
                new ObjectParameter("ScreenId", screenId) :
                new ObjectParameter("ScreenId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetScreenOperationList_Result>("USP_GetScreenOperationList", idParameter, screenIdParameter);
        }
    
        public virtual ObjectResult<USP_GetUserDetails_Result> USP_GetUserDetails(Nullable<long> id, string username)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserDetails_Result>("USP_GetUserDetails", idParameter, usernameParameter);
        }
    
        public virtual ObjectResult<USP_GetUsers_Result> USP_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUsers_Result>("USP_GetUsers");
        }
    }
}
